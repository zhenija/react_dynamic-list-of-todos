{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodo","setSelectedTodo","setTodoId","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","filter","setQuery","query","resetForm","setFilter","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","TodoModal","useState","user","setUser","useEffect","getUsersFromServer","a","userId","receivedUser","href","email","name","App","todosFromServer","setTodosFromServer","setTodos","todoId","loading","setLoading","allTodos","getTodosFromServer","filterByQuery","toLowerCase","includes","todosId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eee41f69.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: number;\n  setSelectedTodo: (selectedTodo: Todo) => void;\n  setTodoId: (usersId: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  setSelectedTodo,\n  setTodoId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo: Todo) => (\n          <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\"> </i>\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames(\n                  { 'has-text-danger': !todo.completed },\n                  { 'has-text-success': todo.completed },\n                )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            {selectedTodo !== todo.id ? (\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    setTodoId(todo.id);\n                    setSelectedTodo(todo);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                </button>\n              </td>\n            ) : (\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button is-link\"\n                  type=\"button\"\n                  onClick={() => {\n                    setTodoId(0);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                </button>\n              </td>\n            )}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","type Props = {\n  filter: string;\n  setQuery: (value: string) => void;\n  query: string;\n  resetForm: () => void;\n  setFilter: (value: string) => void;\n};\n\nexport const TodoFilter:React.FC<Props> = ({\n  filter,\n  setQuery,\n  query,\n  resetForm,\n  setFilter,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filter}\n          onChange={(event) => setFilter(event.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {query && (\n        /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"submit\"\n            className=\"delete\"\n            onClick={resetForm}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo;\n  setTodoId: (usersId: number) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, setTodoId }) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    const getUsersFromServer = async () => {\n      const receivedUser = await getUser(selectedTodo.userId);\n\n      setUser(receivedUser);\n    };\n\n    getUsersFromServer();\n  }, [selectedTodo.id]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setTodoId(0)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoId, setTodoId] = useState(0);\n  const [selectedTodo, setSelectedTodo] = useState<Todo>();\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState('all');\n  const [query, setQuery] = useState('');\n\n  async function getTodosFromServer() {\n    const allTodos = await getTodos();\n\n    setTodosFromServer(allTodos);\n    setTodos(allTodos);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const filteredTodos = () => {\n    const toFilter = todos.filter(todo => {\n      const filterByQuery = todo.title.toLowerCase()\n        .includes(query.toLowerCase());\n\n      switch (filter) {\n        case 'active':\n          return !todo.completed && filterByQuery;\n        case 'completed':\n          return todo.completed && filterByQuery;\n        default:\n          return filterByQuery;\n      }\n    });\n\n    return toFilter;\n  };\n\n  const resetForm = () => {\n    setQuery('');\n    setTodos(todosFromServer);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filter={filter}\n                setQuery={setQuery}\n                query={query}\n                resetForm={resetForm}\n                setFilter={setFilter}\n\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={filteredTodos()}\n                    selectedTodo={todoId}\n                    setSelectedTodo={setSelectedTodo}\n                    setTodoId={(todosId) => {\n                      setTodoId(todosId);\n                    }}\n                  />\n                )}\n            </div>\n\n            {todoId !== 0 && selectedTodo && (\n              <TodoModal\n                selectedTodo={selectedTodo}\n                setTodoId={(todosId) => {\n                  setTodoId(todosId);\n                }}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}